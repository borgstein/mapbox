<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Interactive Map with MapBox</title>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.5.1/mapbox-gl.js"></script>
  <link href="https://api.mapbox.com/mapbox-gl-js/v2.5.1/mapbox-gl.css" rel="stylesheet" />
  <style>
    body { margin: 0; padding: 0; }
    #map { position: absolute; top: 0; bottom: 0; width: 100%; }
    .filter-container { position: absolute; top: 10px; left: 10px; z-index: 1; background-color: #fff; padding: 10px; }
  </style>
</head>
<body>
  <div id="map"></div>
  <div class="filter-container">
    <h3>Filters:</h3>
    <select id="category-filter">
      <option value="">All Categories</option>
    </select>
    <br />
    <input type="range" id="numerical-filter" min="0" max="100" value="50" />
  </div>

  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYm9yZ3N0ZWluIiwiYSI6ImNrbWZmMGdsZzM0b3QybnAxYzgyeXl0aW0ifQ.TidgWkf_hwXD2CccezoLLw';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/borgstein/clhiy9pq901ii01pg2m9xc24y',
      center: [-1.3, 51.77], // Set the desired map center coordinates
      zoom: 12.5 // Set the desired initial zoom level
    });

    var filter = {
      category: null,
      numerical: null
    };

    var categoryFilter = document.getElementById('category-filter');
    categoryFilter.addEventListener('change', function () {
      filter.category = categoryFilter.value;
      applyFilters();
    });

    var numericalFilter = document.getElementById('numerical-filter');
    numericalFilter.addEventListener('input', function () {
      filter.numerical = parseInt(numericalFilter.value);
      applyFilters();
    });

    function applyFilters() {
      // Use filter.category and filter.numerical to filter your data
      // Update the map and display the colored circles based on the filtered data
    }

    // Fetch the data from the Google Sheets API
    var sheetURL = 'https://sheets.googleapis.com/v4/spreadsheets/141_e4T0596a0PL7iGUadTK6QOUYiFP15-yol7sUXhVU/values/Locations?key=AIzaSyCZ-p8zsKq9czBndqiLzeAoG3Dv97MMDf4';
    fetch(sheetURL)
      .then(response => response.json())
      .then(data => {
        // Extract column headers and data from the response
        var headers = data.values[0];
        var rows = data.values.slice(1);

        // Find the column indices for the required fields
        var latIndex = headers.indexOf('LatDD');
        var lonIndex = headers.indexOf('LonDD');
        var categoryIndex = headers.indexOf('Biodiversity Measurement Indicator');

        // Extract unique categories from the data
        var categories = [];
        rows.forEach(row => {
          var category = row[categoryIndex];
          if (category) {
            var itemCategories = category.split(';');
            itemCategories.forEach(category => {
              category = category.trim();
              if (!categories.includes(category)) {
                categories.push(category);
              }
            });
          }
        });

        // Populate the category filter options
        var categoryOptions = '';
        categories.forEach(category => {
          categoryOptions += '<option value="' + category + '">' + category + '</option>';
        });
        categoryFilter.innerHTML += categoryOptions;
        
        // Add the data as a source and layer to the map
        map.on('load', function() {
          map.addSource('points', {
            type: 'geojson',
            data: {
              type: 'FeatureCollection',
              features: rows.map(row => {
                return {
                  type: 'Feature',
                  geometry: {
                    type: 'Point',
                    coordinates: [parseFloat(row[lonIndex]), parseFloat(row[latIndex])]
                  },
                  properties: {
                    category: row[categoryIndex]
                  }
                };
              })
            }
          });

          map.addLayer({
            id: 'circles',
            type: 'circle',
            source: 'points',
            paint: {
              'circle-color': {
                type: 'categorical',
                property: 'category',
                stops: categories.map(category => [category, getColor(category)])
              },
              'circle-radius': 6
            }
          });
        });
      })
      .catch(error => {
        console.log('Error fetching data:', error);
      });

    function getColor(category) {
      // Define your color palette for the categories
      // You can customize this based on your preferences
      var colorPalette = {
        category1: 'red',
        category2: 'lime',
        category3: 'blue',
        category4: 'yellow',
        category5: 'fuchsia',
        category6: 'aqua',
        category7: 'orange',
        category8: 'purple',
        category9: 'green',
        category10: 'pink',
        category11: 'grey',
        category12: 'maroon',
        category13: 'teal',
        category14: 'navy',
        category15: 'gold',
        category16: 'orangered'
        // Add more category-color mappings as needed
      };
      return colorPalette[category] || 'gray'; // Default color for unknown categories
    }

  </script>
</body>
</html>